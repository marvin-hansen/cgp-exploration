# configuration file for git-cliff (0.1.0)

[changelog]

# changelog header
header = """
# Changelog
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | replace(from="v", to="") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespaces from the template
trim = true

# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# allow only conventional commits
# https://www.conventionalcommits.org
conventional_commits = true

# regex for parsing and grouping commits
commit_parsers = [
    { message = '^feat\(derive\)', group = "Features"},
    { message = '^fix\(derive\)', group = "Bug Fixes"},
    { message = '^fix\(derive\)', group = "Hotfixes"},
    { message = '^(doc|docs)\(derive\)', group = "Documentation"},
    { message = '^perf\(derive\)', group = "Performance"},
    { message = '^pkg\(derive\)', group = "Packaging"},
    { message = '^refactor\(derive\)', group = "Refactor"},
    { message = '^edition\(derive\)', group = "Editions"},
    { message = '^style\(derive\)', group = "Styling"},
    { message = '^test\(derive\)', group = "Testing"},
    { message = '^notes\(derive\)', group = "Notes"},
    { message = '^workflow\(derive\)', group = "Workflow"},
    { message = '^content\(derive\)', group = "Content"},
    { message = '^ops\(derive\)', group = "Operations"},
    { message = '^infra\(derive\)', group = "Infrastructure"},
    { message = '^product\(derive\)', group = "Product"},
    { message = '^chore\(derive,release\): prepare for', skip = true},
    { message = '^chore\(derive\)', group = "Miscellaneous Tasks"},
    { message = '^hide\(derive\)', group = "Hidden", skip = true},
    { body = ".*security", group = "Security"},
]

# filter out the commits that are not matched by commit parsers
filter_commits = true

# glob pattern for matching git tags
tag_pattern = "async-dropper-derive-v[0-9]*"

# regex for skipping tags
skip_tags = ".*beta.*"
