module(name = "cgp-exploration")

###############################################################################
# Bazel Dependencies
# https://registry.bazel.build/
###############################################################################
bazel_dep(name = "aspect_bazel_lib", version = "2.10.0")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_oci", version = "2.2.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_rust", version = "0.56.0")

# Toolchains
bazel_dep(name = "toolchains_musl", version = "0.1.20", dev_dependency = True)

###############################################################################
# Rust toolchain # https://github.com/bazelbuild/rules_rust/
###############################################################################
RUST_EDITION = "2021"  # NOTE: 2024 will be released with Rust 1.86.0

RUST_VERSION = "1.83.0"

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = RUST_EDITION,
    versions = [RUST_VERSION],
)

# This overrides a default rust_repository_set created by rust_register_toolchain.
# It must be named exactly this.
# Each exec triple needs one of these calls per target triple it supports.
# The first call needs all of the attrs, the subsequent calls should only set name, target_triple, and target_compatible_with.
rust.repository_set(
    name = "rust_linux_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-unknown-linux-gnu",
    target_compatible_with = [
        "@//build/linker_config:unknown",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-gnu",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_linux_x86_64",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
)
rust.repository_set(
    name = "rust_linux_arm64",
    target_compatible_with = [
        "@//build/linker_config:unknown",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-gnu",
)
rust.repository_set(
    name = "rust_linux_arm64",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)

# We don't need to register a repository_set for exec_triple == target_triple if we're not customising it in any way:
# one will get registered by default.
# But we do for the Linux case above, because we want to add the "@//linker_config:unknown" constraint in that case.
rust.repository_set(
    name = "rust_darwin_x86_64",
    edition = RUST_EDITION,
    exec_triple = "x86_64-apple-darwin",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_darwin_x86_64",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)
rust.repository_set(
    name = "rust_darwin_aarch64",
    edition = RUST_EDITION,
    exec_triple = "aarch64-apple-darwin",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_triple = "x86_64-unknown-linux-musl",
    versions = [RUST_VERSION],
)
rust.repository_set(
    name = "rust_darwin_aarch64",
    target_compatible_with = [
        "@//build/linker_config:musl",
        "@platforms//cpu:arm64",
        "@platforms//os:linux",
    ],
    target_triple = "aarch64-unknown-linux-musl",
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# Rust dependencies are vendored; see:
# //thirdparty/BUILD.bazel

###############################################################################
# MUSL toolchain # https://github.com/bazel-contrib/musl-toolchain
###############################################################################
toolchains_musl = use_extension("@toolchains_musl//:toolchains_musl.bzl", "toolchains_musl", dev_dependency = True)
toolchains_musl.config(
    extra_target_compatible_with = ["@//build/linker_config:musl"],
)

###############################################################################
# OCI base images # https://stackoverflow.com/questions/34198392/docker-official-registry-docker-hub-url
###############################################################################
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# https://hub.docker.com/repository/docker/hansenmarvin/rust-scratch/general
oci.pull(
    name = "scratch",
    digest = "sha256:c6d1c2b62a454d6c5606645b5adfa026516e3aa9213a6f7648b8e9b3cc520f76",
    image = "docker.io/hansenmarvin/rust-scratch",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "scratch", "scratch_linux_amd64", "scratch_linux_arm64")
